//class creates Aimer, x, y, sign, attributes can be receivedpackage com{	import flash.display.Sprite;	import flash.events.MouseEvent;	public class Aimer extends Sprite {		private var aiming_x:Number;		private var aiming_y:Number;		private var aiming_init_alpha:Number = 1;		private var scalefactor:Number=35;		private var aimingcolor:uint= 0x00CCCC;		private var backaimingcolor:uint= 0xFFFFFF;		private var aimingcircle:Sprite = new Sprite();		private var containerpos_x:Number= 0;		private var containerpos_y:Number= 0;		public function Aimer():void {			aimingcircle.alpha=aiming_init_alpha;			drawAimingCircle();			aimingcircle.addEventListener(MouseEvent.CLICK, aimerClickHandler);			aimingcircle.addEventListener(MouseEvent.MOUSE_OVER, aimerMouseOverHandler);			aimingcircle.addEventListener(MouseEvent.MOUSE_OUT, aimerMouseOutHandler);			trace("created aimer");		}		private function aimerClickHandler(evt:MouseEvent):void {			aiming_x= evt.localX;			aiming_y = evt.localY;			trace(aiming_x);		}		private function aimerMouseOverHandler(evt:MouseEvent):void {			aimingcircle.alpha= 0.5;		}		private function aimerMouseOutHandler(evt:MouseEvent):void {			aimingcircle.alpha=aiming_init_alpha;		}		private function drawAimingCircle():void {			var aimer_container:Sprite = new Sprite();			var x_:Number = 0;			var y_:Number = 0;			//calculate diameter 2*r			var r:Number= scalefactor*1*Math.cos( degreeToRadian(45) );			//outside circle			//var semi_circle:Sprite = new Sprite();			aimingcircle.graphics.beginFill(aimingcolor);			aimingcircle.graphics.drawCircle(x_,y_,2*r);			aimingcircle.graphics.endFill();			//inside circle			var inside_circle:Sprite = new Sprite();			inside_circle.graphics.beginFill(backaimingcolor);			inside_circle.graphics.drawCircle(x_,y_,(0.8)*(2*r) );//80%  size outside circle			inside_circle.graphics.endFill();			//rectangle cover			var inside_rect:Sprite = new Sprite();			inside_rect.graphics.beginFill(backaimingcolor);			inside_rect.graphics.drawRect(x_-2*r,y_-2*r,2*r, 4*r );//square placed left of circle mask			inside_rect.graphics.endFill();			//aimingcircle.addEventListener(MouseEvent.CLICK, aimerClickHandler);			aimer_container.addChild(aimingcircle);			aimer_container.addChild(inside_circle);			aimer_container.addChild(inside_rect);			aimer_container.x= containerpos_x;			aimer_container.y=containerpos_y;			addChild(aimer_container);		}		public function degreeToRadian(deg:Number):Number {			return deg * Math.PI / 180;		}		public function RadianToDegree(rad:Number):Number {			return rad * 180 / Math.PI;		}				//accessor		public function aiming_X():Number{			return aiming_x;		}		public function aiming_Y():Number{			return aiming_y;		}	}}