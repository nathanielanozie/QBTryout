//object can move in x and y directionpackage com{	import com.InitialVelocity;//INITIAL VELOCITY class	import flash.utils.Timer;//for timer	import flash.display.*;	import flash.events.*;	public class Moving2dObject extends Sprite {		private var player:Sprite;		private var t:Number = 0;		private var count:Number = 0;		private var INITIALX:Number =10;		private var INITIALY:Number =12;		private var INITIALVX:Number =5;//m/s  + down		private var INITIALVY:Number = 8;		private var INITIALV:Number = 40;		private var INITIALDEG:Number=20;		private var GRAVITY:Number = 30.8;//m/s*s  + down		//TIMER		private var playBackTime:Timer;		private var timer_increment:Number;		private var xpos:Number =INITIALX;		private var ypos:Number =INITIALY;//+ down		private var vi_x:Number=INITIALVX;		private var vi_y:Number=INITIALVY;//+ down		//timer, sprite, degree, velocity, gravity		public function Moving2dObject(aTimer:Timer,obj:Sprite,d:Number=20, v:Number=40,g:Number=9.8):void {						playBackTime= new Timer(aTimer.delay,aTimer.repeatCount);			timer_increment = playBackTime.delay;			player = obj;			INITIALDEG=d;			INITIALV=v;			GRAVITY=g;			addChild(player);			init();			//startTimerAndMove();				trace("created a moving 2d object");		}								//accessor set methods		private function init():void {			init_velocity();//10 m/s at 35 degrees from horizontal			setTimer();		}		private function setTimer():void {			playBackTime.addEventListener(TimerEvent.TIMER, playBackOnTick);			playBackTime.addEventListener(TimerEvent.TIMER_COMPLETE, stopTimer);		}		public function startTimerAndMove():void {			playBackTime.start();		}		private function playBackOnTick(event:TimerEvent):void {			t= count*timer_increment;//msec			t= t/1000;//secs			xpos = getDisplacementX(t,vi_x);			ypos = getDisplacementY(t,vi_y);			//move object 			setXY();			count++;		}		private function setXY():void {			player.x=xpos;			player.y=ypos;		}		private function resetPlayBackTimer(event:TimerEvent):void {			playBackTime.reset();		}		private function stopTimer(event:TimerEvent):void {			playBackTime.stop();			trace("end time"+t);		}		private function init_velocity():void {			//INITIAL VELOCITY class			var initial_obj:InitialVelocity = new InitialVelocity(INITIALV,INITIALDEG);//10 m/s at 35 degrees from horizontal			vi_x=initial_obj.f_initial_vx();			vi_y=initial_obj.f_initial_vy();//+ down		}				//accessor get method		private function getDisplacementX(t:Number, vi_x:Number):Number {			var dx:Number = vi_x*t;			return dx;		}		private function getDisplacementY(t:Number, vi_y:Number):Number {			var dy:Number=  vi_y*t + 0.5*GRAVITY*(t*t);//leave t^2 jagged effect			return dy;		}		public function xposition():Number{ return xpos;}		public function yposition():Number{ return ypos;}		public function testForCollision():void{ trace("a test for collision call"); }		public function playBackTimer():Timer{			return playBackTime;		}			}//Moving2dObject								}