package com{	import com.RotatingSprite;	import com.Aimer;		import flash.display.Sprite;	import flash.events.MouseEvent;	public class MouseMoveRotatingSprite extends RotatingSprite {				private var ypositionActive:Boolean = false;//use aimer		private var obj_ypos:Number;		private var mouse_ypos:Number; //mouse last clicked y position		private var object; //pointer to a sprite		private var chosenAngle:Number;		private var MIRRORANGLE:Number;				private var aimer:Aimer;				public function MouseMoveRotatingSprite(obj:Sprite,m_angle:Number=90,_aimer:Aimer=null):void {			aimer= _aimer;						MIRRORANGLE=m_angle;			chosenAngle=m_angle;						super(obj);//constructor of Rotating Sprite is called			object = rotatingObj();			obj_ypos= obj_y();			mouse_ypos= 0; //default last clicked y location						//MAKE ACTIVE ROTATION Y POSITION, create rotating cemicircle			if(ypositionActive)				object.addEventListener(MouseEvent.CLICK, rotateOnMouseYMove);			else{				if(aimer != null ){					/*				aimer= new Aimer();				aimer.x=10;				aimer.y=10;								object.addChildAt(aimer,0);  //put aimer behind sprite				*/				aimer.addEventListener(MouseEvent.CLICK, rotateOnAimingCircle);				//object.addEventListener(MouseEvent.CLICK, rotateOnAimingCircle);				}			}						}		private function obj_y():Number{ //rotatable object y			return object.y;		}		private function mouse_y():Number{ //cursor clicked y			return mouse_ypos;		}				private function setWhereMouseLastClickedY(my:Number):void{ //set cursor clicked y			mouse_ypos = my;		}				//performs rotation based on aiming circle		private function rotateOnAimingCircle(event:MouseEvent):void{						//create aiming circle			//set chosen angle according to, |x|,|y|, and sign			var anglerad:Number = 0;			var _x= aimer.aiming_X();			var _y= aimer.aiming_Y();						var sign:Number = 1; //1 positive, -1 means negative			if(_y<0){sign= sign*-1;}						anglerad = Math.atan( Math.abs(_y)/Math.abs(_x) );									//object.removeChild(aimer);  //don't rotate aimer			chosenAngle= aimer.RadianToDegree(anglerad)*sign;			trace(chosenAngle);			rotateObjectAndStop(chosenAngle);			//object.addChildAt(aimer,0);  //put aimer behind sprite		}				//performs rotation based on mouse Y position		private function rotateOnMouseYMove(event:MouseEvent):void {			trace("object y: "+obj_y());			trace("mouse y: "+mouse_y());			setWhereMouseLastClickedY(event.stageY); //mouse last clicked y position						var selectionDistance:Number= mouse_ypos-obj_ypos;			if( selectionDistance <0){				var temp_angle:Number;				temp_angle = -Math.abs(MIRRORANGLE);				var scale_factor=  Math.round( Math.abs( selectionDistance / mouse_ypos )*100 );				scale_factor= Math.max(scale_factor,1);				scale_factor= 1/scale_factor;				trace("iiiii"+scale_factor);				temp_angle = Math.round(temp_angle*scale_factor);				rotateObjectAndStop(temp_angle);								chosenAngle= temp_angle;				}			else{				//chosenAngle= -Math.abs(MIRRORANGLE);				chosenAngle= 0;				rotateObjectAndStop(chosenAngle);			}		}		//accessor get		public function cursorAngle():Number{			return chosenAngle;		}			}}